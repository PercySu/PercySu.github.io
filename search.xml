<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[关于时间]]></title>
    <url>%2F2018%2F10%2F22%2FTime%2F</url>
    <content type="text"><![CDATA[这篇感悟是我两年前发布于“平行世界”上的，现在写下来，审视下自己是否进行了更深层的思考。 现在时间2016年12月9日1:11，我已经20岁了。20年，或许对于人，对于猫，对于狗而言，这都是一个跨度非常大的时间段。一个人能有多少个20年，而20年，对于猫狗而言很可能是它的这一辈子还要加上下一辈子才有可能经历的年限。对于相较于生物来说永亘的宇宙而言，20年实在是不值一提，或许只有亿年才配作为它的时间尺度。一个人的一生，60年，70年，相对于宇宙来说只是一瞬而已。但是这个人的一生，经历了辉煌与沧桑。同样地，或许我们所在的这个空间，可能是宇宙，也可能是我们的宇宙与其他的平行宇宙共处的空间，只是另一个更庞然大物的一瞬间所存在的东西而已，或许我们的空间是某个巨人的一个小细胞？还是一个被外界庞然大物们研究所创立的微小空间？我们的时间对他们不值一提，或许连一瞬都没有？打个比方，一个CPU假如主频1GHz，1S可以有10e9个脉冲，1S对于我们而言或许很短。但是，假如在一个脉冲里，一个电子即为一个宇宙，而这个宇宙中存在着生命，在这一个脉冲中，这个宇宙可以无数次生灭，那其中的生命的时间尺度对我们而言已经小得不可估计了。但我们又何必沾沾自喜，我们或许也是那可怜的生物，我们的时间只是外面世界中的一瞬而已，也许外面世界的1s，我们的宇宙已经破灭又生成了数亿次。也许对于有些生物而言，1S就是一个无穷大的时间了，它们的生命周期只有1S的几亿分之一而已。所以，时间这个尺度并不是标准的，对于我们人而言，年，算是很大的时间计量单位了，但对于庞然大物们而言，1S就有我们宇宙的无数次生灭，一个人的生命，它们实在不知如何表示。 思想是个好东西，或许你的肉身，你的灵魂不能让你探清真相，你或许不能证明庞然大物们的存在，但是你可以通过思想无限地发散，你可以想象它们，你可以通过思想造访外面的世界，人的肉身有限，但思想无限。 补充：其实现在我对于平行世界的存在，持有怀疑的态度。假定平行世界真的存在，那它就是我们这个世界的不同种可能。我们把时间间隔设为1S，在这1S内，在这个世界，就算只有一个东西改变了，就会出现分支，会产生另外的平行宇宙。之后其他的变量也变得不可控，会产生更多的分支，更何况，在这个时间段内会有无数个事物改变，那么会产生多少个世界。再把时间推移到更早的时候，从古至今，在任一时间点，某个东西改变，就会产生平行世界吗？那它们的产生消耗的是什么呢，什么能量能支撑这种消耗。把我们比作小船，在海上一直前行，无时无刻不从我们身上分出其他的小小船，那就是不同的可能，那我们为什么就不是被分出来的呢？我的理解是我们确实是被分出来的，但是每个小船肯定都要有一个终点，不管从我们身上分出去多少，我们一直在前行，在往终点航行，我们自身是不会改变的，类比于图中的一条路径，我们的命运是既定的。但是也有可能并不是这样产生平行世界，这毕竟只是产生的路径而已，不一定每条路径都一定产生一个世界。]]></content>
      <categories>
        <category>notes</category>
      </categories>
      <tags>
        <tag>感悟</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[V2Ray,新一代科学上网神器]]></title>
    <url>%2F2018%2F08%2F10%2FV2Ray%2F</url>
    <content type="text"><![CDATA[前两天，我的酸酸乳(SSR)服务器被墙了，于是我查询资料在VPS上搭建了V2Ray平台来科学上网。V2Ray更像是一个工具箱，集成了多种多样的协议和功能： 更完善的协议：V2Ray 使用了新的自行研发的 VMess 协议，改正了 Shadowsocks一些已有的缺点，更难被墙检测到； 更强大的性能: 网络性能更好，具体数据可以看 V2Ray 官方博客 更丰富的功能：以下是部分V2Ray的功能： mKCP:KCP 协议在 V2Ray 上的实现，不必另行安装 kcptun 动态端口：动态改变通信的端口，对抗对长时间大流量端口的限速封锁 路由功能：可以随意设定指定数据包的流向，去广告、反跟踪都可以 传出代理：看名字可能不太好理解，其实差不多可以称之为多重代理。类似于 Tor 的代理 数据包伪装：类似于 Shadowsocks-rss 的混淆，另外对于 mKCP 的数据包也可伪装，伪装常见流量，令识别更困难 WebSocket 协议：可以 PaaS 平台搭建V2Ray，通过 WebSocket 代理。也可以通过它使用 CDN 中转，抗封锁效果更好 Mux:多路复用，进一步提高科学上网的并发性能 总述我只是实现了V2Ray的一些简单功能，有：VMess协议，Shadowsocks协议，mKCP，Mux和国内直连。想要了解更多，可以参考：点我。 配置V2Ray概述从软件上，V2Ray不区分服务器版和客户端版，也就是说客户端和服务器运行的V2Ray其实是一个软件，区别在于它们的配置文件不同，其实就是客户端的config.json和服务器的config.json里面的内容不同罢了。我这里客户端为PC（Windows），服务器端为Linux。 Linux版本VPS系统建议选择Debian 8.x及以上或者Ubuntu 16.04及以上。我用的是Vultr + Debian 8 x64 + Los Angeles 。VPS服务器购买参见我的另一篇文章搭建SSR服务器附带锐速加速。 客户端安装点这里下载V2Ray的Windows压缩包，根据电脑系统位数选择v2ray-windows-32.zip或v2ray-windows-64.zip。下载解压，会有两个重要文件：①config.json：它就是客户端配置文件，等会就是将它的内容进行改写。②v2ray.exe：是一个命令行程序，启动后可以看到命令行界面。（相似的有：wv2ray.exe 是一个后台程序，没有界面，会在后台自动运行。）至此，客户端安装好了，我们需要对config.json进行改写，我放在后面写。 服务器安装脚本安装现在有大神做的一键脚本：一键脚本，但我没用过，你可以试一试。我还是按官方提供的脚本安装的，通过XShell用SSH登录进你的VPS后，操作如下：1.下载脚本1wget https://install.direct/go.sh 2.执行脚本安装V2Ray1bash go.sh 当显示: V2Ray v3.34(版本号) is installed. 表明安装成功。在首次安装完成之后，V2Ray 不会自动启动，需要手动运行启动命令（你可以在修改完配置文件之后启动）。V2ray的常用命令： 启动V2Ray： 1systemctl start v2ray 停止V2Ray： 1systemctl stop v2ray 重启V2Ray： 1systemctl restart v2ray 下面我们就该修改配置文件了：（注意：每次修改完配置文件都需要重启V2Ray服务）。1vi /etc/v2ray/config.json 下面是我的服务器端配置和客户端配置。 服务器配置config.json(服务器)/etc/v2ray/config.json1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253&#123; "log": &#123; "access": "/var/log/v2ray/access.log", "error": "/var/log/v2ray/error.log", "loglevel": "warning" &#125;, "inbound": &#123; "port": 1234, //vmess协议的端口号，自己选择，但是客户端和服务器要相同 "protocol": "vmess", "settings": &#123; "clients": [&#123; "id": "e685a7a0-8789-4595-9d17-f7b231f4abff", //相当于SSR中的密码，服务器和客户端要相同,通过（https://www.uuidgenerator.net/）生成 "alterId": 77 //自己选择，服务器和客户端相同 &#125;] &#125;, "streamSettings":&#123; //mkcp加速 "network":"mkcp", "kcpSettings":&#123; "mtu":1350, "tti":20, "uplinkCapacity":10, "downlinkCapacity":100, "congestion":false, "readBufferSize":1, "writeBufferSize":1, "header":&#123; "type":"none" &#125; &#125; &#125; &#125;, "inboundDetour": [&#123; //shadowsocks协议部分，我这里部署了两个端口都是ss协议，你可以不部署 "protocol": "shadowsocks", "port": 5555, //端口号自己选择 "settings": &#123; "method": "aes-256-gcm", //协议自己选择 "password": "????????", //密码自己设定 "udp":true &#125; &#125;,&#123; "protocol": "shadowsocks", "port": 6666, //端口号自己选择 "settings": &#123; "method": "chacha20-ietf", //协议自己选择 "password": "????????", //密码自己设定 "udp":true &#125; &#125;], "outbound": &#123; "protocol": "freedom", "settings": &#123;&#125; &#125;&#125; 请认真观察上面参数怎么填然后检查一下：1/usr/bin/v2ray/v2ray -test -config /etc/v2ray/config.json 如果显示:12An unified platform for anti-censorship.Configuration OK. 表明配置文件没问题,启动（重启）v2ray服务。 客户端配置客户端上的json文件你可以在Atom或者VSCode或其他编辑器上改写，提高效率，记事本真的不方便。/v2ray-v3.34-windows-64/config.json123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114&#123; "log": &#123; "loglevel": "warning" &#125;, "inbound": &#123; "listen": "127.0.0.1", "port": 1081, //监听端口 "protocol": "socks", "domainOverride":["tls","http"], "settings": &#123; "auth": "noauth", "udp": true &#125; &#125;, "outbound": &#123; "protocol": "vmess", "settings": &#123; "vnext":[ &#123; "address":"??.??.??.??", //你的VPS的ip "port":"1234", //和服务器的端口号对应 "users":[ &#123; "id":"e685a7a0-8789-4595-9d17-f7b231f4abff", //和服务器的id要对应 "level":1, "alterId":77 //和服务器的要对应 &#125; ] &#125; ] &#125;, "streamSettings":&#123; "network":"mkcp", "kcpSettings":&#123; "mtu":1350, "tti":20, "uplinkCapacity":10, "downlinkCapacity":100, "congesion":false, "readBufferSize":1, "writeBufferSize":1, "header":&#123; "type":"none" &#125; &#125; &#125;, "mux": &#123;"enabled": true&#125; &#125;, "outboundDetour":[ &#123; "protocol": "freedom", "settings": &#123;&#125;, "tag": "direct" &#125; ], "routing": &#123; "strategy": "rules", "settings": &#123; "rules": [ &#123; "type": "field", "port": "54-79", "outboundTag": "direct" &#125;, &#123; "type": "field", "port": "81-442", "outboundTag": "direct" &#125;, &#123; "type": "field", "port": "444-65535", "outboundTag": "direct" &#125;, &#123; "type": "field", "domain": [ "gc.kis.scr.kaspersky-labs.com" ], "outboundTag": "direct" &#125;, &#123; "type": "chinasites", "outboundTag": "direct" &#125;, &#123; "type": "field", "ip": [ "0.0.0.0/8", "10.0.0.0/8", "100.64.0.0/10", "127.0.0.0/8", "169.254.0.0/16", "172.16.0.0/12", "192.0.0.0/24", "192.0.2.0/24", "192.168.0.0/16", "198.18.0.0/15", "198.51.100.0/24", "203.0.113.0/24", "::1/128", "fc00::/7", "fe80::/10" ], "outboundTag": "direct" &#125;, &#123; "type": "chinaip", "outboundTag": "direct" &#125; ] &#125; &#125;&#125; 然后运行，v2ray.exe,如果出现：123V2Ray v3.34 (die Commanderin) 20180806A unified platform for anti-censorship.2018/08/10 02:21:29 [Warning] Core: V2Ray v3.34 started 表明配置成功，服务启动，你每次用的话都要启动该程序，且不能关闭，用最小化它在后台运行即可。 服务器端json上传如果你在VPS上Vim编写服务器端的config.json文件不熟练，可以在Windows下写好后上传到VPS上。下面说下利用Linux自带的软件lrzsz上传文件。 lrzsz安装1.CentOS12yum update -yyum install lrzsz -y 2.Debian12apt-get update -yapt-get install lrzsz -y 使用1.上传1rz 2.下载1sz 需要下载文件名 具体操作(Debian8)安装lrzsz12apt-get update -yapt-get install lrzsz -y 上传config.json将写好的config.json文件放在桌面，在VPS上输入命令：1rz 选中该文件即可。 覆盖原始文件输入1ls 命令看是否下载成功，成功的话，输入命令1mv config.json /etc/v2ray/config.json 成功。当然了你也可以使用其他的方式，WinSCP，FTP，Http…… 锐速加速如果你部署了SS服务，可以使用锐速加速，Debian 8适配的内核是3.16.0-4-amd64，而vultr的默认版本是3.16.0-6-amd64，但是我们发现，它也存在3.16.0-4-amd64版本，我们所做的就是删除3.16.0-6-amd64版本的内核。但是如果你没有3.16.0-4-amd64版本的内核，就需要下载安装： 查看内核1dpkg -l|grep linux-image 我们发现存在两个版本的内核，3.16.0-4-amd64和3.16.0-6-amd64,我们删除掉3.16.0-6-amd64内核，直接看第三步；如果你没有3.16.0-4-amd64，看第二步。 安装内核1.下载3.16.0.4-deb内核1wget http://security-cdn.debian.org/pool/updates/main/l/linux/linux-image-3.16.0-4-amd64_3.16.43-2+deb8u5_amd64.deb 2.安装3.16.0-4内核1dpkg -i linux-image-3.16.0-4*.deb 删除内核1.先查看所有内核版本1dpkg -l|grep linux-image 2.删除掉所有非3.16.0.4版本的内核 通过上图我们发现我们需要删除的就一个3.16.0-6版本的内核，如果有其他的也删除掉。1apt-get -y remove linux-image-3.16.0-6-amd64 在删除时，会有个选项,询问你是否终止删除内核，选择No! 重启1reboot 安装锐速重新连接VPS，输入1wget -N --no-check-certificate https://raw.githubusercontent.com/91yun/serverspeeder/master/serverspeeder-all.sh &amp;&amp; bash serverspeeder-all.sh 客户端使用Windows可以使用自带客户端v2ray.exe + Chrome上的SwitchyOmega插件。具体步骤参考：SwitchyOmega+v2ray V2RayN（推荐，很方便） Mac参考：（https://233blog.com/post/25/） AndroidBifrostV Google Play 搜索“v2rayNG” （推荐） IOS美区：Shadowrocket,Kitsunebi(已下架),PepiIOS端目前没有很好用的app，唯一好用的kitsunebi下架了，shadowrocket支持vmess协议但却不支持kcp。 参考资料详细教程教程2一键脚本Chrome代理]]></content>
      <categories>
        <category>服务器</category>
      </categories>
      <tags>
        <tag>V2Ray</tag>
        <tag>科学上网</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CMake + OpenCV3.4.1 + VS2017静态编译]]></title>
    <url>%2F2018%2F05%2F19%2FCMake_OpenCV%2F</url>
    <content type="text"><![CDATA[引言 最近在做毕业设计的过程中，想要在未安装OpenCV环境的机器上运行我的OpenCV+MFC代码。但是从OpenCV3.1开始官方默认使用动态库的形式发布。我想使用静态库通过静态链接来将所用到的库链接进exe文件中，所以进行了OpenCV源码的静态编译。 准备工作CMake:https://cmake.org/ OpenCV:https://opencv.org/releases.html 步骤1.安装OpenCV，并找到源码安装OpenCV就不讲了，源码在安装目录的sources文件夹中 2.运行CMake进入CMake安装目录，运行/bin/cmake-gui.exe，填写相关参数，包括：OpenCV源码目录 和OpenCV.sln工程的导出目录 点击Configure 第一次导出时需要设置后面用来编译此OpenCV.sln工程的VS的版本，这里我用的是VS 2017： 注意：这里要不要选Win 64要看你VS下的配置信息，Debug x64 和 Release x64下选择带”Win 64”的选项，Debug win32 和 Release win32选择不带”Win 64”的选项 OpenCV的源码中的CMAKE文件默认编译动态库，默认勾选BUILD_SHARED_LIBS选项，编译静态库时只需要取消该选项即可，这也是编译静态库和动态库的在设置上唯一差别。 &gt; 划重点：强烈建议去掉BUILD_EXAMPLES，BUILD_TESTS，BUILD_PERF_TESTS这个三个选项(这三个选项默认勾选)，否则静态编译的示例程序非常大。 然后再点击Configure，如果出现红色背景，则表示出错，再Configure，直到不报错就点击Generate就完成了。 3.打开OpenCV.sln，编译生成Debug和Release库在文件输出目录找到OpenCV.sln,打开，选择编译版本是Debug还是Release,建议两个版本都编译一次。 点击x64旁边的下拉菜单，打开配置管理器，默认情况下,IANSTALL项目是没打勾的，一定记得打上，不然待会配置时怎么都找不到install这个文件夹，也就找不到include,opencv,opencv2。Release(Debug)切换到Debug(Release)模式下，需重新打勾。 选择生成 –&gt; 重新生成解决方案 找到CMakeTargets中的INSTALL，然后右键选择“仅限于项目”–&gt;“仅生成INSTALL”： 4.在Visual Studio中配置生成的OpenCV库文件项目 –&gt; XX(项目名)属性要想静态链接，必须要设置&quot;MFC的使用：在静态库中使用MFC&quot;和&quot;C/C++ --&gt; 代码生成 --&gt; 运行库：/MT(Debug版本为：/MTD)&quot; Release版本VC++目录&gt;包含目录：123D:\Su\OpenCV3_4_1\Static\install\includeD:\Su\OpenCV3_4_1\Static\install\include\opencvD:\Su\OpenCV3_4_1\Static\install\include\opencv2 VC++目录&gt;库目录：1D:\Su\OpenCV3_4_1\Static\install\x64\vc15\staticlib 链接器&gt;输入&gt;附加依赖项：12345678910111213141516171819202122232425262728IlmImf.libippicvmt.libippiw.libittnotify.liblibjasper.liblibjpeg.liblibpng.liblibprotobuf.liblibtiff.liblibwebp.libopencv_calib3d341.libopencv_core341.libopencv_dnn341.libopencv_features2d341.libopencv_flann341.libopencv_highgui341.libopencv_imgcodecs341.libopencv_imgproc341.libopencv_ml341.libopencv_objdetect341.libopencv_photo341.libopencv_shape341.libopencv_stitching341.libopencv_superres341.libopencv_video341.libopencv_videoio341.libopencv_videostab341.libzlib.lib Debug版本VC++目录&gt;包含目录：123D:\Su\OpenCV3_4_1\Static\install\includeD:\Su\OpenCV3_4_1\Static\install\include\opencvD:\Su\OpenCV3_4_1\Static\install\include\opencv2 VC++目录&gt;库目录：1D:\Su\OpenCV3_4_1\Static\install\x64\vc15\staticlib 链接器&gt;输入&gt;附加依赖项：(Debug版本带’d’,Release不带)12345678910111213141516171819202122232425262728IlmImfd.libippicvmt.libippiwd.libittnotifyd.liblibjasperd.liblibjpegd.liblibpngd.liblibprotobufd.liblibtiffd.liblibwebpd.libopencv_calib3d341d.libopencv_core341d.libopencv_dnn341d.libopencv_features2d341.libopencv_flann341.libopencv_highgui341d.libopencv_imgcodecs341d.libopencv_imgproc341d.libopencv_ml341d.libopencv_objdetect341d.libopencv_photo341d.libopencv_shape341d.libopencv_stitching341d.libopencv_superres341d.libopencv_video341d.libopencv_videoio341d.libopencv_videostab341d.libzlibd.lib 调试调试即可，如果出现：只需要在附加依赖项第一项中加入nafxcw.lib即可(必须为第一项) 总结静态链接将库文件加载进exe文件中，虽然增加了exe文件的大小，但是却使exe不需要携带大量的dll运行。]]></content>
      <categories>
        <category>环境搭建</category>
      </categories>
      <tags>
        <tag>OpenCV</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[搭建SSR服务器附带锐速加速]]></title>
    <url>%2F2018%2F03%2F12%2FSSR%2F</url>
    <content type="text"><![CDATA[引言SSR是shadowsocks的升级版，加入了参数混淆的功能，在这里我们只使用它的代理功能。 购买VPS服务器个人推荐：VULTR你也可以选择：搬瓦工 账户注册直接：Create Account注册账号。 充值进入”Billing“选“Alipay”就可以使用支付宝进行充值。vultr的服务是按时间收费的，当你租了服务器之后不管你有没有部署服务它都会扣费。在这里，我充值了$25。 购买服务器点击“Servers”，然后点“+”号，选择服务器的类型。地区推荐选择“洛杉矶”，东京貌似不太好出IP。系统选择“CentOS 6x64”，服务就选$5/mo就行。点击“Deploy Now”，完成购买。 查看服务器信息进入“Server”，选择你的服务器进入，有自己服务器的详细信息。IP Address:这就是你的ssr服务器的IP地址。Pass Word:这就是你进行ssh认证的密码。 重要的一步在控制台中ping自己得到的IP地址，看看能不能ping通。新机初始化的时候，可能ping不通，5min后还是ping不通进入http://ping.chinaz.com/。输入自己ssr服务器的IP地址，如果国内的ping一片飘红，国外都能ping通，那么你十有八九就是被墙了。 处理方法将自己的服务器销毁掉，重新购买服务器，建议多买几个服务器，配置不变，购买数量增加即可。然后挨个ping看看哪个IP能ping通。 连接服务器Windows可通过xshell4或者putty进行ssh远程登录。我用的是mac自带的ssh客户端。 SSR安装123wget --no-check-certificate https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocksR.shchmod +x shadowsocksR.sh./shadowsocksR.sh 2&gt;&amp;1 | tee shadowsocksR.log 分别输入以上这三行代码。 Please input password for ShdawsocksR: 会让你设置密码，看自己喜好。 Please input port for ShadowsockR[1-65535]: 会让你设置端口号。 安装完成耐心等待安装，安装完会显示SSR的配置信息，记下来。至此，你的SSR服务器就搭建好了。你可以通过服务器的IP，端口和密码去科学上网了。 非必要修改登录密码如果你觉得每次ssh时密码输入很麻烦，这个密码可以改的，当ssh连接上后，输入1passwd root 多用户配置你的ssr服务器现在是让用户都通过同一个密码和端口使用。如果你想让多个端口对应多个密码，就要进行多用户配置。ssh登录你的ssr服务器，输入命令：1vi /etc/shadowsocks.json 多用户配置实例：/etc/shadowsocks.json123456789101112131415161718192021&#123;"server":"0.0.0.0","server_ipv6": "[::]","local_address":"127.0.0.1","local_port":1080,"port_password":&#123; "8989":"password1", #这里是8989端口对应一个密码 "8990":"password2", "8991":"password3"&#125;,"timeout":300,"method":"aes-256-cfb","protocol": "origin","protocol_param": "","obfs": "plain","obfs_param": "","redirect": "","dns_ipv6": false,"fast_open": false,"workers": 1&#125; 此时，你的新增端口还无效，必须在防火墙中开启端口 防火墙设置关闭防火墙：1service iptables stop 在iptables防火墙中开放特定端口:1/sbin/iptables -I INPUT -p tcp –-dport 8989 -j ACCEPT 这里的8989是我随便输的，这里的值是你shadowsocks.json里多用户配置里的端口号。 然后保存1/etc/rc.d/init.d/iptables save 开启防火墙：1service iptables start ssr加速(破解版锐速）首先要说的是锐速不支持Openvz！VPS最好选的是KVM。ssh登录进ssr服务器 安装锐速1wget -N --no-check-certificate https://raw.githubusercontent.com/91yun/serverspeeder/master/serverspeeder-all.sh &amp;&amp; bash serverspeeder-all.sh 如果提示内核版本不对，就要更换内核。 如何更换内核CentOS6更换内核: 123rpm -ivh http://soft.91yun.org/ISO/Linux/CentOS/kernel/kernel-firmware-2.6.32-504.3.3.el6.noarch.rpmrpm -ivh http://soft.91yun.org/ISO/Linux/CentOS/kernel/kernel-2.6.32-504.3.3.el6.x86_64.rpm --force 分别输入以上的命令就可以更换内核。 CentOS7更换内核： 1rpm -ivh http://soft.91yun.org/ISO/Linux/CentOS/kernel/kernel-3.10.0-229.1.2.el7.x86_64.rpm --force 更新完需重启机器,输入命令1reboot 重启后ssh连接再输入锐速安装指令。 修改SSH端口SSH默认端口为22，容易被人破解和攻击，建议修改，此处系统为CentOS61.编辑配置文件：默认端口为22，并且被注释掉，去掉#，将22改为一个五位数，如：222221vi /etc/ssh/sshd_config 2.在防火墙上开放端口1iptables -I INPUT -p tcp -m state --state NEW -m tcp --dport 22222 -j ACCEPT 1iptables-save 3.检查端口是否开放1iptables -nL --line-number 4.重启SSH服务，并重新连接1/etc/init.d/sshd restart 客户端Windows、Android、Mac版：下载 密码: 17gqIOS:美区账号查找:”Potatso Lite“或者”Shadowrocket(PP助手上也有)”]]></content>
      <categories>
        <category>服务器</category>
      </categories>
      <tags>
        <tag>科学上网</tag>
        <tag>ShadowSocks</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Windows下输入正确密码无法进入的解决办法]]></title>
    <url>%2F2018%2F02%2F22%2FWindows_Passwd%2F</url>
    <content type="text"><![CDATA[问题描述 开机后输入密码无法进入桌面，显示无网络状态（右下角网络处为红叉），进入死循环重启，或者是显示其他用户，会出现异常的账户和密码输入框。 问题原因 系统无法连接到sens服务导致。 解决办法进入“安全模式”win7和win8都是开机按F8，但对于win10不适用。 对于win10： 能进到登录界面如果能进系统到登录界面，按以下步骤可以进入“安全模式”： 按住“Shift”，然后点击电源按钮 -&gt; 重启 重启后进入蓝色界面，单击疑难解答 点击高级选项 点启动设置 点击右下角的启动按钮，重启后选择4就进入了“安全模式” 再给出能进入系统的进入安全模式的方法： win+r会出现运行框，输入msconfig 选择引导，将安全引导打上勾即可。（但要注意，如果要退出安全模式，需要在安全模式下，同样步骤将钩去掉） 不能进入系统很多时候电脑坏掉，需要在安全模式下进行查错解决，但是如何进入安全模式呢? 在开机出现`微软`图标下面有转圈的小点时，立即关掉电源，如此两次，第三次启动时就进入安全模式了。 进入”命令提示符(管理员）“开始 -&gt; 所有应用 -&gt; Windows系统 -&gt; 命令与提示符 -&gt; 右键，选以管理员方式运行 或者 win+s -&gt; 输入cmd -&gt; 在最佳匹配里的命令与提示符右键选以管理员方式运行 输入命令在C:\windows\system32&gt;后面接着输入:netsh winsock reset catalog后按回车键。 这时会提示:“成功重置winsock目录,你必须重新启动计算机才能完成重置”，重启电脑后就可以正常使用了。]]></content>
      <categories>
        <category>问题解决</category>
      </categories>
      <tags>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Windows下使用GitHub+Hexo搭建个人博客]]></title>
    <url>%2F2017%2F12%2F18%2FHexo_Blog%2F</url>
    <content type="text"><![CDATA[首先，资料参考自http://blog.csdn.net/wx_jin/article/details/51027783，我对其中有些内容进行了补充与修改，因为其中有些内容过时了，有些内容有纰漏。—特此说明 准备工作安装Node.js下载地址：Node.js下载地址可以通过node -v命令测试是否安装成功。具体操作：①win+r –&gt; ②cmd –&gt; ③node -v如果成功的话，是这样：PS:在这里我要安利一个软件，它可以用来代替cmd，这个软件叫做cmder，十分良心，附上下载地址：cmder下载地址 安装Git下载地址：Git下载地址可以通过git –-version的命令来测试git是否安装成功 注册GitHub账号去Github官网注册即可。注册完成之后添加SSH Key(教程在下面)。这个 SSH Key是一个认证，让github识别绑定这台机器，允许这台机器提交。进入自己机器的1C:\Users\OrangeSu(这里为你的用户名) 看看该文件夹下有没有: .ssh文件夹 下面就说下怎么配置SSH Key。 生成新的SSH Key配置生成文件在Git Bash执行代码：1ssh-keygen -t rsa -C "hzpengcheng@gmail.com" 将邮箱改为你自己的邮箱。成功后会生成两个文件id_rsa以及id_rsa.pub 添加SSH Key到GitHub在Git hub右上角，点击头像，选择 Settings -&gt; SSH and GPG keys -&gt; New SSH key 复制你的id_rsa.pub里的内容到”Key”中 完成！ 安装hexo 在本地新建一个文件夹，取名为Blog，文件右键，选择Git BashHere。（如果没有，是因为你安装Git时没有选择添加右键的选项）解决方法 输入指令安装hexo：1npm install -g hexo 安装完成后，可在git bash中输入hexo测试是否安装成功。 设置hexo接着初始化Hexo：1hexo init hexo 初始化成功会显示Start blogging with Hexo!这时在你刚才创建的Blog文件夹里面会多出一个hexo文件夹 进入hexo目录中，输入命令npm install，安装依赖文件以及部署形成文件进入目录：1cd hexo 安装：1npm install 部署：1hexo generate 开启服务1hexo server #简写 hexo s 打开浏览器输入 http://localhost:4000/ 就可以看到默认的博客(图片源于网络): ps:hexo s只是开启了本地的服务，只能在自己机子上的4000端口可以看见效果，并未发布到git hub上，用来本地预览功能。 配置GitHubPage登录GitHub，点击”New repository”，新建仓库。输入仓库名：你的GitHub名称.github.io ps:我看网上有人说创建名字一定要用你的github用户名，不然显示不出来。虽然我没试过，但是最好还是填你的用户名就好，免得出现不必要的错误。 启用GitHubPage选择仓库中的”Settings”,找到”GitHub Pages”,在”Source”中选择master branch,然后点击save 点击”save”后页面会自动刷新，再看”GitHub Pages”时，会新出现一行提示 点击链接，会出现 界面比较简陋，在”GitHub Pages”里面除了”Source”，还有一个”Theme Chooser”， 你可以在里面选择一个你喜欢的主题。打开自己在github的静态网址，我的http://percysu.com/Percy.github.io/，你会发现，打开是你自己刚才选择静态站点模版。 将本地hexo项目托管到GitHub打开修改hexo目录下配置文件_config.yml编辑最后面的deploy属性，加入代码：/hexo/_config.yml123type: gitrepository: git@github.com:PercySu/Percy.github.io.gitbranch: master type使用是gitrepository属性改成你的仓库的地址分支branch填写master 注意:“冒号”后面要空一格再输入 _config.yml网站的配置文件，你可以在这里配置一些基本信息，这里列举部分关键配置：/hexo/_config.yml123456789101112131415161718192021222324252627# Hexo Configuration## Docs: https://hexo.io/docs/configuration.html## Source: https://github.com/hexojs/hexo/# Sitetitle: 此行光明，亦复何言？ #网站的标题subtitle: 何不如笑傲风月，踏三山，伴红颜，此生无憾！ #副标题description: 世事一场大梦，人生几度秋凉？ #描述author: PercySu #作者信息avatar: /images/avatar.png #头像，图片位置在相应主题目录下的imageslanguage: zh-Hans #中文简体email: hzpengcheng@163.comtimezone:# Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: next #配置主题，这里使用next主题stylus: compress: true #自适应布局# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: git #部署环境，基于hexo+githubpage,所以这里使用git。注意：不同版本的hexo，type有可能不同，3.x以后应使用git,具体参看官方文档 repository: git@github.com:username/username.github.io.git #git仓库地址，替换成你的username即可，其他保持不变，后面会提到如何创建git仓库 branch: master 自己根据自己的需要修改。 安装hexo-deployer-git插件1npm install hexo-deployer-git --save 部署你本地的主题到github上代码如下,每次修改本地文件都得执行一下代码：123hexo clean #简写 hexo chexo generator #简写 hexo ghexo deploy #简写 hexo d hexo clean #清除缓存 网页正常情况下可以忽略此条命令hexo g #生成静态网页hexo d #开始部署 大功告成！ 后话环境虽然已经搭建好了，但是这只是个框架而已，你还没有往里面填东西。你可以自己选择主题，写文章，自己定义自己的Style。 写文章你得使用Markdown语法，很好学，不到半个小时你就能学会。Markdown语法手册CmdMarkdown下载 关于主题你可以从github上clone主题，进行个性化修改，我使用的是next主题修改教程 关于绑定域名教程]]></content>
      <categories>
        <category>环境搭建</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于VS Code报错“扩展主机意外终止”的解决办法]]></title>
    <url>%2F2017%2F10%2F01%2FVSC_Ext%2F</url>
    <content type="text"><![CDATA[问题这是很久前遇到的问题了，写下来方便后面遇到同样问题的朋友参考下，因为我本人在百度和Google上查了很久才解决掉。 问题描述一张图片足矣: 解决线索最后在Github上找到了一些线索，就实践了下，结果意外地成功了，感谢微软的员工joaomoreno。附上他的解决方法：链接 解决办法我给出我最后的解决办法：重装git。如果你发现自己没git，那就去下载一个。下载地址 最后后面我偶然发现，在一个帖子里，有一个用户和我同样的操作，证明是可行的。链接]]></content>
      <categories>
        <category>问题解决</category>
      </categories>
      <tags>
        <tag>VS Code</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Atom插件安装问题]]></title>
    <url>%2F2017%2F10%2F01%2FAtom_Packages%2F</url>
    <content type="text"><![CDATA[Atom：优雅迷人之美 其实我更喜欢VS Code，不过，不要在意这些细节。 Atom是由GitHub打造的先进开源的跨平台代码编辑器,它开源免费跨平台，并且整合 GIT 并提供类似 SublimeText 的包管理功能，支持插件扩展，可配置性非常高。Atom 代码编辑器支持 Windows、Mac、Linux 三大桌面平台，完全免费，并且已经在 GitHub 上开放了全部的源代码。可能，Atom在性能、启动速度、插件库方面与其他老牌代码编辑器还有一些差距，不过由于 Atom 是由 Github 维护的，它拥有非常强大的后台。并且那里有着大量极为优秀的编程爱好者，也是极客们的聚集地，相信在不久的将来Atom一定也会拥有不少新的插件包，而性能方面的缺点迟早也会被解决掉。PS：Atom一直以来让人诟病启动慢的问题在新版本的发行后已经得到了很好的解决。插件这篇文章主要是解决Atom插件安装时会遇到的问题。首先，先给出Atom的插件网站，点这里，你可以在这个网站上下载你想要安装的插件。1.插件下载2.插件安装然后将下载下来的.zip文件解压，解压后的文件夹放在C://用户//（你的用户名）//.atom//packages里面，然后启动Atom即可。ps:还有一种方式，不用下载插件，直接在Atom里面进行：想要安装中文插件，搜索“atom-simplified-chinese-menu”3.可能遇到的问题如果遇到下图类似的问题:第一条横线是你出错的插件名;第二条横线是缺少的部件。解决方法 cd到你的插件包里面：这里假设出问题的包是”activate-power-mode” 执行 npm install lodash.random 成功的话，重启Atom即可。如果不能执行npm命令，那么你需要下载Node.js:下载Node.js。]]></content>
      <categories>
        <category>问题解决</category>
      </categories>
      <tags>
        <tag>Atom</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[VS Code配置Python开发环境]]></title>
    <url>%2F2017%2F09%2F29%2FVSC_Py%2F</url>
    <content type="text"><![CDATA[必读 要知道，VS Code推荐一个项目以文件夹方式打开，所以你的配置都是针对一个文件夹而言的。也就是说，如果你重新创建了一个文件夹来存放.py的文件，那么你就要重新配置task.json 和 launch.json文件。如果你有简便的方法请告诉我。 配置Python开发环境 点击扩展,搜索python,选择第一个，点击安装。 配置python路径： 文件 –&gt; 首选项 –&gt; 设置 –&gt;(此时会出现左右两栏，左边是默认设置，右边是用户设置，我们要在用户设置中输入来覆盖默认的设置)，在搜索栏中输入pythonpath,从左边复制粘贴到右边，将pythonpath中的值改为你的python的绝对路径： 打开一个文件夹，创建一个python文件，随便写点代码，按Ctrl + Shift + b运行程序。这时候会提示配置生成任务。选择运行任意外部命令菜单。 在打开的 task.json文件中改为：1234567891011121314&#123; // See https://go.microsoft.com/fwlink/?LinkId=733558 // for the documentation about the tasks.json format "version": "2.0.0", "command": "python", "isShellCommand": true, "args": ["$&#123;file&#125;"], "showOutput": "always", "options": &#123; "env":&#123; "PYTHONIOENCODING": "UTF-8" &#125; &#125;&#125; 再Ctrl + Shift +b运行程序即可。 若想调试，配置交互式环境 选择调试，在下拉菜单（现在为空）里选择添加配置,会生成launch.json文件，保存关闭,下拉菜单会出现多个选项，一般选择： ①python（不能接受输入） ②Intergrated Terminal/Console ③External Terminal/Console 当选择②Intergrated Terminal/Console时，对launch.json进行配置，找到”name”:”Intergrated Terminal/Console”这一项，将”cwd”里的值改为”${workspaceRoot}”即可。 参考资料：https://jingyan.baidu.com/article/00a07f38503a2b82d028dc26.html https://www.zhihu.com/question/49799276]]></content>
      <categories>
        <category>环境搭建</category>
      </categories>
      <tags>
        <tag>VS Code</tag>
        <tag>Python</tag>
      </tags>
  </entry>
</search>
